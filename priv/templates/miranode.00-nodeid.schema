%%-*- mode: erlang -*-

%% @doc {{nodeid}} - example application specific config
{mapping, "listener.http.$name", "{{nodeid}}.http", [
        {datatype, ip}
    ,   {default, {"0.0.0.0", {{app_port}} }}
    ,   {include_default, "default"}
]}.

{translation,
 "{{nodeid}}.http",
  fun(Conf) ->
      HTTP = cuttlefish_variable:filter_by_prefix("listener.http", Conf),
      [ IP || {_, IP} <- HTTP]
  end
}.

%% @doc IP Checker rules for http interface. Comma-seperated list of 
%%      routing_prefix/mask (i.e. CIDR notation) entries
%%      Example: 10.2.2.0/24,192.168.0.1/32,127.0.0.0/24
{mapping, "ipchecker.http.$name", "{{nodeid}}.ipchecker_http", [
        {datatype, string}
    ,   {default, "127.0.0.1/24,127.0.0.2/24"}
    ,   {include_default, "all"}
]}.

{translation,
 "{{nodeid}}.ipchecker_http",
  fun(Conf) ->

    HttpIpRules = lists:filter(
    fun({K, _V}) ->
       cuttlefish_variable:is_fuzzy_match(K, string:tokens("ipchecker.http.$name", "."))
    end,
    Conf),

    [ {Path, Rules} || {[_,_,Path], Rules} <- HttpIpRules ]

  end
}.


%% @doc UUID - 12 character hex string to use as the MAC in 
%% UUID generation.
{mapping, "uuid_mac", "mira_uuid_server.node_mac", [
        {datatype, string}
    ,   {default, "001122334455"}
]}.

